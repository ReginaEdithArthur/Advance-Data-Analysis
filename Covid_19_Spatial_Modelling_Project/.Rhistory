ARIMA113
# ARIMA213
ARIMA213 = Arima(TBJ, order = c(2, 1, 3), seasonal = c(0, 0, 0))
ARIMA213
# ARIMA114
ARIMA114 = Arima(TBJ, order = c(1, 1, 4), seasonal = c(0, 0, 0))
ARIMA114
# ARIMA214
ARIMA214 = Arima(TBJ, order = c(2, 1, 4), seasonal = c(0, 0, 0))
ARIMA214
#### Coefficient Test for Arima Model ####
coeftest(ARIMA111)
#### Diagnostics (Checking for Residuals), autocorrelation using p-value ####
arima111_residuals = residuals(ARIMA111)
arima111_residuals
plot(arima111_residuals)
checkresiduals(ARIMA111)
ArchTest(arima111_residuals) ## Arch Test: to detect the presence of time-varying volatility clustering in a time series
### Forecasting using the ARIMA Model ###
forecast(ARIMA111, h = 12)
plot(forecast(ARIMA111, h = 12))
BJ = BJsales
BJ
view(BJ)
View(BJ)
library(tseries)
library(lmtest)
library(tseries)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(datasets)
BJ = BJsales
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ)
### Phillips–Perron test ###
pp.test(TBJ)
### KPSS Test ###
kpss.test(TBJ)
#### Difference data
DTBJ = diff(TBJ, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ### 
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
Arima112= Arima(TBJ,order=c(1,1,2),seasonal= c(0,0,0))
Arima112
Arima212= Arima(TBJ,order=c(2,1,2),seasonal= c(0,0,0))
Arima212
Arima113= Arima(TBJ,order=c(1,1,3),seasonal= c(0,0,0))
Arima113
Arima213= Arima(TBJ,order=c(2,1,3),seasonal= c(0,0,0))
Arima213
Arima114= Arima(TBJ,order=c(1,1,4),seasonal= c(0,0,0))
Arima114
Arima214= Arima(TBJ,order=c(2,1,4),seasonal= c(0,0,0))
Arima214
# Coefficient Test for Arima Model ####
coeftest(Arima111)
residuals(Arima111)
plot(residuals(Arima111))
checkresiduals(Arima111)
ArchTest(residuals(Arima111))
forecast(Arima111, h=24)
plot(forecast(Arima111, h=24))
print(Arima111)
length(TBJ)
forecast(Arima111)
library(tseries)
library(tseries)
library(lmtest)
library(forecast)
library(FinTS)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
#### Convert to time series data ####
TBJ = ts(data, frequency = 24, start = c(2000, 1))
TBJ
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
#### Convert to time series data ####
TBJ = ts(data, frequency = 365, start = c(2014, 9, 17))
TBJ
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Ensure it's sorted correctly
data <- data[order(data$Date), ]
#### Convert to time series data ####
TBJ = ts(data, frequency = 365, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(data, frequency = 252, start = c(2014, 9, 17))
TBJ
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Ensure it's sorted correctly
data <- data[order(data$Date), ]
#### Convert to time series data ####
TBJ = ts(data, frequency = 365.25, start = c(2014, 9, 17))
TBJ
BJ = BJsales
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts <- xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts <- apply.monthly(data_xts, mean)
# Resample to monthly frequency and compute mean
monthly_data_xts <- apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(data, frequency = 365.25, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 365.25, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014, 9, 17))
TBJ
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014, 9, 30))
TBJ
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014,12))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ)
### Phillips–Perron test ###
pp.test(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ_Close,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ,order=c(2,1,1),seasonal= c(0,0,0))
Arima211= Arima(TBJ_Close,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
# Coefficient Test for Arima Model ####
coeftest(Arima111)
residuals(Arima111)
plot(residuals(Arima111))
checkresiduals(Arima111)
ArchTest(residuals(Arima111))
forecast(Arima111, h=24)
plot(forecast(Arima111, h=24))
print(Arima111)
length(TBJ)
forecast(Arima111)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
#### Convert to time series data ####
TBJ = ts(data, frequency = 12, start = c(2014,9))
TBJ
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
#### Convert to time series data ####
TBJ = ts(data, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts = xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts <- apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
ggAcf(DTBJ)
ggPacf(DTBJ)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts = xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts = apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ_Close,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ_Close,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts = xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts = apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ_Close,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ_Close,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
# Coefficient Test for Arima Model ####
coeftest(Arima211)
residuals(Arima211)
plot(residuals(Arima211))
checkresiduals(Arima211)
ArchTest(residuals(Arima211))
forecast(Arima211, h=24)
plot(forecast(Arima211, h=24))
#Set working directory
setwd("C:/Users/Administrator/Desktop/Advance Data Analysis Exam/Covid_19_Project")
# Load the Packages
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
# Read the CSV file
ghana_covid <- read_delim("gha_subnational_covid19_hera.csv", delim = ";")
spec(ghana_covid) #to retrieve the full column specification for this data
# Check the first few rows
head(ghana_covid) #Viewing column heads
#Renaming Columns
ghana_covid <- ghana_covid %>%
rename(
country = PAYS,
country_id = ID_PAYS,
region = REGION,
region_id = ID_REGION,
cases = CONTAMINES,
deaths = DECES,
recovered = GUERIS,
female_cases = CONTAMINES_FEMME,
male_cases = CONTAMINES_HOMME,
unspecified_gender_cases = CONTAMINES_GENRE_NON_SPECIFIE
)
colnames(ghana_covid) #check column names
#Removing Column
ghana_covid <- ghana_covid %>%
select(-...15)
colnames(ghana_covid) #check column names
#Removing All Rows with Regions Labeled Non spécifiér
n_before <- nrow(ghana_covid)# Count rows before
ghana_covid <- ghana_covid %>%
filter(region != "Non spécifié")
n_after <- nrow(ghana_covid)# Count rows after
cat("Initial number of rows were ", n_before)
cat("Current number of rows are ", n_after)
cat("Removed", n_before - n_after, "rows.\n")# Count how many were removed
#Changing "Service de la Santé du Ghana" to "Ghana Health Service" in SOURCE column
ghana_covid <- ghana_covid %>%
mutate(SOURCE = ifelse(SOURCE == "Service de la Santé du Ghana", "Ghana Health Service", SOURCE))
#Viewing the dataset from different angle using head()
options(tibble.width = Inf)  # Show all columns when using tibbles
head(ghana_covid) #Viewing column heads
#Installation of spatial packages
install.packages("logger")#tmap depends on logger, you don't need to load it
#Load Spatial Packages
library(sf)
library(tmap)
# Load Ghana Regions shapefile
ghana_shapefile <- st_read("C:/Users/Administrator/Desktop/Advance Data Analysis Exam/Covid_19_Project/geoBoundaries-GHA-ADM1_simplified.shp")
head(ghana_shapefile) #Viewing column heads
# Check the region names
ghana_shapefile$shapeName
# Unique region names in COVID data
sort(unique(ghana_covid$region))
# Unique region names in shapefile
sort(unique(ghana_shapefile$shapeName))
# Remove " Region" from shapefile names
ghana_shapefile <- ghana_shapefile %>%
mutate(region_clean = str_replace(shapeName, " Region$", ""),
region_clean = ifelse(region_clean == "Ahafo", "Brong Ahafo", region_clean))
sort(unique(ghana_shapefile$region_clean)) # cleaned unique region names in shapefile
ghana_covid$deaths <- as.numeric(ghana_covid$deaths) #Make deaths numeric in order to sum it, because it was char
#Making covid data compact in order to display it
covid_summary <- ghana_covid %>%
group_by(region) %>%
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE)
)
#Merging the covid data with the shapefile
ghana_merged <- ghana_shapefile %>%
left_join(covid_summary, by = c("region_clean" = "region"))
tmap_mode("view")  #Making the map interactive
#Styling and plotting the map
tm_shape(ghana_merged) +
tm_polygons(
fill = "total_cases",                        # What to color by
fill.scale = tm_scale(values = "brewer.yl_or_rd"),    # Color palette
fill.legend = tm_legend(title = "Total Cases")  # Legend title
) +
tm_title("Ghana COVID-19 Cases by Region")
combine_data <- ghana_merged
ghana_population <- read_delim("gha_population_adm1_2021.csv", delim = ",")
ghana_merged_population <- combine_data %>%
left_join(ghana_population, by = c("region_clean" = "region"))
#Styling and plotting the map
tm_shape(ghana_merged_population) +
tm_polygons(
fill = "total_cases",                        # What to color by
fill.scale = tm_scale(values = "brewer.yl_or_rd"),    # Color palette
fill.legend = tm_legend(title = "Total Cases")  # Legend title
) +
tm_title("Ghana COVID-19 Cases by Region and Population")
library(spdep)
library(spatialreg)
# Create neighbors list based on region boundaries
ghana_nb <- poly2nb(ghana_merged_population)
# Convert to spatial weights list
ghana_weights <- nb2listw(ghana_nb, style = "W", zero.policy = TRUE)
# Fit a spatial lag model (lagsarlm)
lag_model <- lagsarlm(total_cases ~ population,
data = ghana_merged_population,
listw = ghana_weights,
zero.policy = TRUE)
summary(lag_model)
ghana_merged_population$residuals <- residuals(lag_model)
tm_shape(ghana_merged_population) +
tm_polygons("residuals", palette = "-RdBu", title = "Model Residuals")
View(ghana_merged_population)
# Create neighbors list based on region boundaries
ghana_nb <- poly2nb(ghana_merged_population)
# Convert to spatial weights list
ghana_weights <- nb2listw(ghana_nb, style = "W", zero.policy = TRUE)
# Fit a spatial lag model (lagsarlm)
lag_model <- lagsarlm(total_cases ~ Total Population,
# Fit a spatial lag model (lagsarlm)
lag_model <- lagsarlm(total_cases ~ 'Total Population',
data = ghana_merged_population,
listw = ghana_weights,
zero.policy = TRUE)
# Fit a spatial lag model (lagsarlm)
lag_model <- lagsarlm(total_cases ~ `Total Population`,
data = ghana_merged_population,
listw = ghana_weights,
zero.policy = TRUE)
summary(lag_model)
ghana_merged_population$residuals <- residuals(lag_model)
tm_shape(ghana_merged_population) +
tm_polygons("residuals", palette = "-RdBu", title = "Model Residuals")
