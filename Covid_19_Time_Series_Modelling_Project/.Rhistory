plot(forecast(Arima111, h=24))
library(forecast)
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
forecast(Arima111, h=24)
Arima111= ARIMA(TBJ,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
forecast(Arima111, h=24)
plot(forecast(Arima111, h=24))
forecast(Arima111)
plot(residuals(Arima111))
checkresiduals(Arima111)
ArchTest(residuals(Arima111))
forecast(Arima111, h=24)
plot(forecast(Arima111, h=24))
forecast(Arima111)
forecast(Arima111, h=24)
print(Arima111)
length(TBJ)
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
Arima111= ARIMA(TBJ,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
forecast(Arima111, h=24)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(datasets)
BJ = BJsales
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ)
### Phillips–Perron test ###
pp.test(TBJ)
### KPSS Test ###
kpss.test(TBJ)
#### Difference data ####
DTBJ = diff(TBJ, differences = 1)
DTBJ
#### Exploring Difference Data ####
plot(DTBJ)
### Stationarity Tests for Difference Data ###
adf.test(DTBJ)
pp.test(DTBJ)
kpss.test(DTBJ)
#### Model Specification ####
ggAcf(DTBJ) # --- checking the MA values
ggPacf(DTBJ) # --- checking the AR values
# ARIMA111
ARIMA111 = Arima(TBJ, order = c(1, 1, 1), seasonal = c(0, 0, 0))
ARIMA111
# ARIMA211
ARIMA211 = Arima(TBJ, order = c(2, 1, 1), seasonal = c(0, 0, 0))
ARIMA211
# ARIMA112
ARIMA112 = Arima(TBJ, order = c(1, 1, 2), seasonal = c(0, 0, 0))
ARIMA112
# ARIMA212
ARIMA212 = Arima(TBJ, order = c(2, 1, 2), seasonal = c(0, 0, 0))
ARIMA212
# ARIMA113
ARIMA113 = Arima(TBJ, order = c(1, 1, 3), seasonal = c(0, 0, 0))
ARIMA113
# ARIMA213
ARIMA213 = Arima(TBJ, order = c(2, 1, 3), seasonal = c(0, 0, 0))
ARIMA213
# ARIMA114
ARIMA114 = Arima(TBJ, order = c(1, 1, 4), seasonal = c(0, 0, 0))
ARIMA114
# ARIMA214
ARIMA214 = Arima(TBJ, order = c(2, 1, 4), seasonal = c(0, 0, 0))
ARIMA214
#### Coefficient Test for Arima Model ####
coeftest(ARIMA111)
#### Diagnostics (Checking for Residuals), autocorrelation using p-value ####
arima111_residuals = residuals(ARIMA111)
arima111_residuals
plot(arima111_residuals)
checkresiduals(ARIMA111)
ArchTest(arima111_residuals) ## Arch Test: to detect the presence of time-varying volatility clustering in a time series
### Forecasting using the ARIMA Model ###
forecast(ARIMA111, h = 12)
plot(forecast(ARIMA111, h = 12))
BJ = BJsales
BJ
view(BJ)
View(BJ)
library(tseries)
library(lmtest)
library(tseries)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(datasets)
BJ = BJsales
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ)
### Phillips–Perron test ###
pp.test(TBJ)
### KPSS Test ###
kpss.test(TBJ)
#### Difference data
DTBJ = diff(TBJ, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ### 
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
Arima112= Arima(TBJ,order=c(1,1,2),seasonal= c(0,0,0))
Arima112
Arima212= Arima(TBJ,order=c(2,1,2),seasonal= c(0,0,0))
Arima212
Arima113= Arima(TBJ,order=c(1,1,3),seasonal= c(0,0,0))
Arima113
Arima213= Arima(TBJ,order=c(2,1,3),seasonal= c(0,0,0))
Arima213
Arima114= Arima(TBJ,order=c(1,1,4),seasonal= c(0,0,0))
Arima114
Arima214= Arima(TBJ,order=c(2,1,4),seasonal= c(0,0,0))
Arima214
# Coefficient Test for Arima Model ####
coeftest(Arima111)
residuals(Arima111)
plot(residuals(Arima111))
checkresiduals(Arima111)
ArchTest(residuals(Arima111))
forecast(Arima111, h=24)
plot(forecast(Arima111, h=24))
print(Arima111)
length(TBJ)
forecast(Arima111)
library(tseries)
library(tseries)
library(lmtest)
library(forecast)
library(FinTS)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
#### Convert to time series data ####
TBJ = ts(data, frequency = 24, start = c(2000, 1))
TBJ
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
#### Convert to time series data ####
TBJ = ts(data, frequency = 365, start = c(2014, 9, 17))
TBJ
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Ensure it's sorted correctly
data <- data[order(data$Date), ]
#### Convert to time series data ####
TBJ = ts(data, frequency = 365, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(data, frequency = 252, start = c(2014, 9, 17))
TBJ
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Ensure it's sorted correctly
data <- data[order(data$Date), ]
#### Convert to time series data ####
TBJ = ts(data, frequency = 365.25, start = c(2014, 9, 17))
TBJ
BJ = BJsales
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts <- xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts <- apply.monthly(data_xts, mean)
# Resample to monthly frequency and compute mean
monthly_data_xts <- apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(data, frequency = 365.25, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 365.25, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014, 9, 17))
TBJ
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014, 9, 17))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014, 9, 30))
TBJ
#### Convert to time series data ####
TBJ = ts(BJ, frequency = 12, start = c(2000, 1))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 24, start = c(2014,12))
TBJ
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ)
### Phillips–Perron test ###
pp.test(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ_Close,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ,order=c(2,1,1),seasonal= c(0,0,0))
Arima211= Arima(TBJ_Close,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
# Coefficient Test for Arima Model ####
coeftest(Arima111)
residuals(Arima111)
plot(residuals(Arima111))
checkresiduals(Arima111)
ArchTest(residuals(Arima111))
forecast(Arima111, h=24)
plot(forecast(Arima111, h=24))
print(Arima111)
length(TBJ)
forecast(Arima111)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
#### Convert to time series data ####
TBJ = ts(data, frequency = 12, start = c(2014,9))
TBJ
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
#### Convert to time series data ####
TBJ = ts(data, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts = xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts <- apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
ggAcf(DTBJ)
ggPacf(DTBJ)
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts = xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts = apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ_Close,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ_Close,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
library(tseries)
library(lmtest)
library(FinTS)
library(forecast)
library(xts)
data = read.csv("C:/Users/Administrator/Desktop/Time Series Forecasting/bitcoin_price", header = TRUE, sep = ",")
data
# Convert 'Date' column to Date type
data$Date = as.Date(data$Date, format = "%Y-%m-%d")
# Convert DataFrame to xts
data_xts = xts(data[, -1], order.by = as.Date(data$Date))
# Resample to monthly frequency and compute mean
monthly_data_xts = apply.monthly(data_xts, colMeans)
# Print the result
head(monthly_data_xts)
#### Convert to time series data ####
TBJ = ts(monthly_data_xts, frequency = 12, start = c(2014,9))
TBJ
#### Exploring the Data ####
plot(TBJ)
#### ACF Plot ####
ggAcf(TBJ)
# Select the 'Close' column as a univariate time series
TBJ_Close = TBJ[, "Close"]
### Augmented Test ###
adf.test(TBJ_Close)
### Phillips–Perron test ###
pp.test(TBJ_Close)
### KPSS Test ###
kpss.test(TBJ_Close)
#### Difference data
DTBJ = diff(TBJ_Close, differences=1)
DTBJ
#### Exploring the Data ####
plot(DTBJ)
### Augmented Test ###
adf.test(DTBJ)
### Phillips–Perron test ###
pp.test(DTBJ)
### KPSS Test ###
kpss.test(DTBJ)
ggAcf(DTBJ)
ggPacf(DTBJ)
Arima111= Arima(TBJ_Close,order=c(1,1,1),seasonal= c(0,0,0))
Arima111
Arima211= Arima(TBJ_Close,order=c(2,1,1),seasonal= c(0,0,0))
Arima211
# Coefficient Test for Arima Model ####
coeftest(Arima211)
residuals(Arima211)
plot(residuals(Arima211))
checkresiduals(Arima211)
ArchTest(residuals(Arima211))
forecast(Arima211, h=24)
plot(forecast(Arima211, h=24))
#Set working directory
setwd("C:/Users/Administrator/Desktop/Advance Data Analysis Exam/Covid_19_Time_Series_Modelling_Project")
# Install these packages if you don't have them yet
install.packages(c("forecast", "tseries", "urca", "ggplot2"))
# Load libraries
library(forecast)
library(tseries)
library(urca)
library(ggplot2)
# Load the data
data <- read.csv("WHO-COVID-19-global-daily-data.csv")
# Convert Date_reported to Date type
data$Date_reported <- as.Date(data$Date_reported, format="%d/%m/%Y")
# Aggregate Global New Cases
global_cases <- aggregate(New_cases ~ Date_reported, data=data, sum)
# Replace any negative or NA values (sometimes corrections in COVID data)
global_cases$New_cases[global_cases$New_cases < 0] <- 0
global_cases$New_cases[is.na(global_cases$New_cases)] <- 0
# Plot Global Daily New Cases
ggplot(global_cases, aes(x=Date_reported, y=New_cases)) +
geom_line(color = "blue") +
labs(title="Global Daily New COVID-19 Cases", x="Date", y="New Cases") +
theme_minimal()
# Convert to time series object
ts_cases <- ts(global_cases$New_cases, frequency = 365) # daily data
# Augmented Dickey-Fuller Test (ADF)
adf.test(ts_cases)
# Phillips-Perron Test (PP)
pp.test(ts_cases)
# KPSS Test
kpss.test(ts_cases)
# ACF and PACF plots
acf(ts_cases, main="ACF of Differenced Series")
pacf(ts_cases, main="PACF of Differenced Series")
# Apply first differencing if non-stationary
diff_ts_cases <- diff(ts_cases)
# Plot differenced series
plot(diff_ts_cases, main="Differenced Global COVID-19 Cases", ylab="Differenced Cases", xlab="Time")
# Re-run stationarity tests
adf.test(diff_ts_cases)
pp.test(diff_ts_cases)
kpss.test(diff_ts_cases)
# ACF and PACF plots
acf(diff_ts_cases, main="ACF of Differenced Series")
pacf(diff_ts_cases, main="PACF of Differenced Series")
auto.arima(diff_ts_cases)
# Example: Fit ARIMA(p, d, q)
# Replace p, d, q with actual numbers from auto.arima() or your inspection
model <- arima(ts_cases, order=c(5,0,5))
# Summary of model
summary(model)
# Residuals plot
tsdisplay(residuals(model), lag.max=40, main="Model Residuals")
# Ljung-Box test
Box.test(residuals(model), lag=20, type="Ljung-Box")
# Forecast next 365 days (1 year)
forecast_cases <- forecast(model, h=365)
# Plot forecast
plot(forecast_cases)
# View forecasted values
print(forecast_cases)
